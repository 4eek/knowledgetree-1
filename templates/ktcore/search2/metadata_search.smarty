
{$context->oPage->requireCSSResource("thirdpartyjs/extjs/resources/css/ext-all.css")}

{$context->oPage->requireJSResource("thirdpartyjs/extjs/adapter/ext/ext-base.js")}
{$context->oPage->requireJSResource("thirdpartyjs/extjs/ext-all.js")}

<h2>{i18n}Metadata Query Builder{/i18n}</h2>

<p class="descriptiveText">{i18n}
The metadata query builder allows you to construct a basic metadata search expression.
<P>


{/i18n}</p>


<div>


{if $txtQuery == ''}
{assign var=txtQuery value="Title contains \"something\" or \nMetadata contains \"else\""}
{/if}
{literal}
<style>
.metadatadate { width: 80px }
</style>
<script>
// TODO: should object orientate some of this... very repetitive...
var metadata_fieldsets;
var metadata_fieldsets_active;
var metadata_offset;
var metadata_html;
var metadata_fields;
var metadata_field_html;
var metadata_fieldset_offsets;
var fields_visible;

var metadata_gotFieldSets = function callBack(o)
{
	if (o.responseText != '{}')
	{
		var resp = eval('(' + o.responseText + ')');
		if (resp.status == 0)
		{
			var selFieldSets = document.getElementById('selFieldSets');

			for(i=0;i<resp.fieldsets.length;i++)
			{
				var opt = new Option(resp.fieldsets[i].name, resp.fieldsets[i].id);
				selFieldSets.options[selFieldSets.options.length] = opt;
			}
		}
		else
		{
			alert('There is a problem getting the field sets. \n\n' + resp.message );
		}
	}
}

var metadata_gotDocumentTypes = function callBack(o)
{
	if (o.responseText != '{}')
	{
		var resp = eval('(' + o.responseText + ')');
		if (resp.status == 0)
		{
			var selDocumentTypes = document.getElementById('selDocumentTypes');

			for(i=0;i<resp.documenttypes.length;i++)
			{
				var opt = new Option(resp.documenttypes[i].name, resp.documenttypes[i].id);
				selDocumentTypes.options[selDocumentTypes.options.length] = opt;
			}
		}
		else
		{
			alert('There is a problem getting the document types. \n\n' + resp.message );
		}
	}
}

var metadata_gotNoStatus = function callBack(o)
{
	alert('There is a problem communicating with the server.' +  o.responseText);
}

var documentTypeCallback =
{
	success:metadata_gotDocumentTypes,
	failure:metadata_gotNoStatus
}

var fieldsetsCallback =
{
	success:metadata_gotFieldSets,
	failure:metadata_gotNoStatus
}

function butClearClick()
{
	var txtQuery = document.getElementById('txtAdvQuery');
	txtQuery.value = '';
}

function loadDocumentTypes()
{
	url='{/literal}{$rootUrl}{literal}/search2/ajax/metadata.php?what=documenttypes';
	YAHOO.util.Connect.asyncRequest('GET',url, documentTypeCallback);
}

function loadFieldSets()
{
	url='{/literal}{$rootUrl}{literal}/search2/ajax/metadata.php?what=fieldsets';
	YAHOO.util.Connect.asyncRequest('GET',url, fieldsetsCallback);
}

function getElByName(name)
{


	for(var i=0;i<document.frmQuery.elements.length;i++)
	{
		if (document.frmQuery.elements[i].name == name)
		{
			return document.frmQuery.elements[i];
		}
	}

	var item = $(name);
	if (item != null)
	{
		return item;
	}

	return null;
}

function buildExpression()
{
	var expr = '';

	for(var i=1;i<=metadata_fields.length;i++)
	{
		var fieldname = document.getElementById('field' + i + 'exprfield');
		var op = document.getElementById('field' + i + 'op');
		var start = getElByName('field' + i + 'start');
		var end = getElByName('field' + i + 'end');

		if (fieldname == null)
		{
			continue;
		}
		fieldname = fieldname.innerHTML;

		op = op.value;

		//alert(fieldname + ' ' + metadata_fields[i-1].control + ' ' + metadata_fields[i-1].name);

		if (start.type == 'select-multiple')
		{

			var subexpr = '(';
			for(var j=0;j<start.options.length;j++)
			{
				if (start.options[j].selected == true)
				{
					if (subexpr != '(') subexpr += ' OR ';
					subexpr += fieldname + ' ' + op + ' "' + start.options[j].value + '"';
				}
			}
			subexpr += ')';

			if (subexpr != '()')
			{
				if (expr != '') expr += ' AND '
				expr += subexpr;
			}
		}
		else if (metadata_fields[i-1].control == 'tree')
		{
			expr += '(todo tree)';
		}
		else
		{
			if (start.value == '') continue;
			var subexpr = fieldname + ' ' + op + ' "' + start.value + '"';
			switch (op)
			{
				case 'between':
				case 'not between':
					subexpr += ' AND ' + ' "' + end.value + '"';
					break;
			}
			if (expr != '') expr += ' AND '

			expr += subexpr;
		}
	}
	return expr;
}

function butSearchClick()
{
	var expr = buildExpression();
	if (expr == '')
	{
		alert('Please select some search criteria');
		return;
	}

	var txtQuery = document.getElementById('txtQuery');
	txtQuery.value=expr;


	var frm = document.getElementById('frmQuickSearch');
	frm.submit();
}

function onBetweenOpChange(i)
{
	var op = document.getElementById('field' + i + 'op');
	var end = document.getElementById('field' + i + 'end');
	var range1 = document.getElementById('field' + i + 'range1');
	var range2 = document.getElementById('field' + i + 'range2');
	switch (op.value)
	{
		case 'between':
		case 'not between':
				range2.style.visibility=range1.style.visibility='visible';
				break;
		default:
				range2.style.visibility=range1.style.visibility='hidden';
				break;
	}
}




function createEditString(i, field, prefix_html, suffix_html)
{
	var html = "<table><tr><td valign=top>";
	html += "<select name=\"field"+ i+"op\" id=\"field"+ i+"op\"\>";
	html += "<option value=\"=\">is";
	html += "<option value=\"!=\">is not";
	html += "<option value=\"contains\">contains";
	html += "<option value=\"does not contain\">does not contain";
	html += "<option value=\"is like\">like";
	html += "<option value=\"is not like\">not like";
	html += "<option value=\"starts with\">starts with";
	html += "<option value=\"ends with\">ends with";
	html += "</select>&nbsp;&nbsp;";
	html += "<td valign=top>";
	html += "<input name=\"field"+ i+"start\" id=\"field"+ i+"start\">";
	html += "</table>";



	return html;

}

function createEditDate(i, field)
{


	var html = "<table><tr><td valign=top>";

	html += "<select name=\"field"+ i+"op\" id=\"field"+ i+"op\" onchange=\"onBetweenOpChange("+ i+")\">";
	html += "<option value=\"<=\">before";
	html += "<option value=\"\>=\">after";
	html += "<option value=\"between\">between";
	html += "<option value=\"=\">is";
	html += "<option value=\"!=\">is not";
	html += "</select>&nbsp;&nbsp;";
	html += "<td valign=top>";

	html += "<div id=\"field"+ i+"start\"></div>";


	html += "<td valign=top id=\"field"+ i+"range1\" style=\"visibility: hidden\">and</td>";
	html += "<td valign=top id=\"field"+ i+"range2\" style=\"visibility: hidden\">";

	html += "<div id=\"field"+ i+"end\"></div>";

	html += "</table>";


	return html;

}


function createEditNumeric(i, field)
{

	var html = "<table><tr><td valign=top>";

	html += "<select name=\"field"+ i+"op\" id=\"field"+ i+"op\" onchange=\"onBetweenOpChange("+ i+")\">";
	html += "<option value=\"\<\">&lt;";
	html += "<option value=\"\<=\">&lt;=";
	html += "<option value=\"\>\">\&gt;";
	html += "<option value=\"\>=\">&gt;=";
	html += "<option value=\"=\">=";
	html += "<option value=\"!=\">!=";
	html += "<option value=\"between\">between";
	html += "</select>&nbsp;&nbsp;";

	html += "<td valign=top>";

	html += "<div id=\"field"+ i+"start\"></div>";
	html += "<td valign=top id=\"field"+ i+"range1\" style=\"visibility: hidden\">and</td>";
	html += "<td valign=top id=\"field"+ i+"range2\" style=\"visibility: hidden\">";
	html += "<div id=\"field"+ i+"end\"></div>";

	html += "</table>";

	return html;
}

function createEditLookup(i, field, options)
{
	var html = "<table><tr><td valign=top>";

	html += "<select name=\"field"+ i+"op\" id=\"field"+ i+"op\" style=\"width: 250px\">";
	html += "<option value=\"=\">is";
	html += "<option value=\"!=\">is not";
	html += "</select>&nbsp;&nbsp;";

	html += "<td valign=top>";

	html += "<select name=\"field"+ i+"start\" id=\"field"+ i+"start\" multiple>";
	for(i=0;i<options.length;i++)
	{
		html += "<option value=\"" + options[i].name + "\">" + options[i].name;
	}
	html += "</select>";
	html += "</table>";

	return html;
}

function createEditTree(i, field)
{

	var html = "<select>";
	html += "<option value=\"=\">is";
	html += "<option value=\"!=\">is not";
	html += "</select>&nbsp;&nbsp;";

	html += "<input> <input id=treehide type=button value=\"hide\">";

	html += "<div id=tree></div>";

	return html;
}

function fieldsetSelect(fieldsetid, fieldoffset, el)
{
	var offset = el.options[el.selectedIndex].value;
	var wrapperEl = $('field'+offset+'wrapper');

	if (wrapperEl.innerHTML == '')
	{
		updateSelect(el, el.selectedIndex, el.options[el.selectedIndex].value, el.options[el.selectedIndex].text + ' *');
		wrapperEl.innerHTML = metadata_field_html[offset];
		fields_visible++;
		metadata_fieldsets_active[fieldsetid] ++;

		startname = 'field' + offset + 'start';
		endname = 'field' + offset + 'end';
		switch (metadata_fields[offset-1].datatype)
		{
			case 'INT':
				var nf = new Ext.form.NumberField( {decimalPrecision : "0", name: startname});
				var nf2 = new Ext.form.NumberField({ decimalPrecision : "0", name: endname});
				nf.render(startname);
				nf2.render(endname);
				break;
			case 'FLOAT':
				var nf = new Ext.form.NumberField({ decimalPrecision : "10", name: startname});
				var nf2 = new Ext.form.NumberField({decimalPrecision : "10", name: endname});
				nf.render(startname);
				nf2.render(endname);
				break;
			case 'DATE':
				var df = new Ext.form.DateField({format : "Y-m-d", fieldClass: 'metadatadate', name: startname});
				var df2 = new Ext.form.DateField({format : "Y-m-d", fieldClass: 'metadatadate', name: endname});
				df.render(startname);
				df2.render(endname);
				break;
			case 'USERLIST':
			case 'STRING':
				break;
			default:
		}
	}
	else
	{
		text = el.options[el.selectedIndex].text;
		updateSelect(el, el.selectedIndex, el.options[el.selectedIndex].value, text.substring(0,text.length - 2));

		fields_visible--;
		metadata_fieldsets_active[fieldsetid]--;

		wrapperEl.innerHTML = '';
	}


	$('fieldset' + fieldsetid + 'empty').innerHTML = (metadata_fieldsets_active[fieldsetid] == 0)?'No fields have been selected to be part of the search criteria.':'';

	// make buttons visible
	$('divActualButtons').innerHTML = (fields_visible > 0)?$('divButtons').innerHTML:'';
}

var metadata_gotFieldSetField = function callBack(o)
{
	if (o.responseText != '{}')
	{
		var resp = eval('(' + o.responseText + ')');
		if (resp.status == 0)
		{

			var fieldset = metadata_fieldsets[metadata_offset].name;
			var fieldset_offset = metadata_fields.length;

			metadata_fieldsets_active[metadata_offset] = 0;
			metadata_html += "<fieldset><legend>" + fieldset + "</legend>";
			metadata_html += "<table width=\"100%\"><tr><td valign=top width=\"50%\">";

			metadata_html += "<div id=\"fieldset"+ metadata_offset + "empty\">No fields have been selected to be part of the search criteria.</div>";


			for(i=0;i<resp.fields.length;i++)
			{
				var field=resp.fields[i];
				var fieldname = field.name;

				metadata_fields[metadata_fields.length] = field;

				metadata_html += "<div id=\"field"+ metadata_fields.length+"wrapper\" style=\"visibility: visible\">";
				metadata_html += "<div id=\"field"+ metadata_fields.length+"exprfield\" style=\"visibility: hidden\">[\""+fieldset+"\"][\""+fieldname+"\"]</div>";
				metadata_html += "<div class=\"field\"><label>" + fieldname + '</label>';
				metadata_html += "<p class=\"descriptiveText\">" + resp.fields[i].description + '</p>';

				if (field.control == 'normal')
				{
					switch(field.datatype)
					{
						case 'CHAR':
						case 'TEXT':
						case 'STRING':
							metadata_html+=createEditString(metadata_fields.length,field);
							break;
						case 'DATE':
							metadata_html+=createEditDate(metadata_fields.length,field);
							break;
						case 'USERLIST':
							metadata_html+=createEditUserList(metadata_fields.length,field);
							break;
						case 'INT':
						case 'FLOAT':
							metadata_html+=createEditNumeric(metadata_fields.length,field);
							break;
					}
				}
				else if (resp.fields[i].control == 'lookup')
				{
					metadata_html+=createEditLookup(metadata_fields.length, field, field.options);
				}
				else if (resp.fields[i].control == 'tree')
				{
					metadata_html+=createEdiTree(metadata_fields.length, field, field.options);
				}
				metadata_html += "</div>";
				metadata_html += "</div>";
			}

			metadata_html += "<td valign=top>";
			metadata_html += "<B>Available Fields:</b><br>";
			metadata_html += "<select id=\"fieldsetSelection"+metadata_offset+"\" style=\"width: 250px\" onclick=\"fieldsetSelect(" + metadata_offset + ","+fieldset_offset+",this)\" size="+resp.fields.length+">";
			for(i=0;i<resp.fields.length;i++)
			{
				field=resp.fields[i].name;
				o = fieldset_offset + i+1;
				metadata_html += "<option value=\""+o+"\">" + field;
			}
			metadata_html += "</select>";
			metadata_html += "<p>Click on any of the fields above to make them part of the search criteria.<br>An asterisk (*) indicates that it is included.";



			metadata_html += "</table>";

			metadata_html += "</fieldset>";

			if (++metadata_offset < metadata_fieldsets.length)
			{
				loadFieldset(metadata_fieldsets[metadata_offset].id);
			}
			else
			{
				// we display the div...
				$('divFieldsets').innerHTML = metadata_html;

				for(var j=1;j<=metadata_fields.length;j++)
				{
					var el = $("field"+ j+"wrapper");
					metadata_field_html[j] = el.innerHTML;
					el.innerHTML = '';
				}
			}
		}
		else
		{
			alert('There is a problem getting the document type field sets. \n\n' + resp.message );
		}
	}
}

var fieldSetFieldCallback =
{
	success:metadata_gotFieldSetField,
	failure:metadata_gotNoStatus
}

function loadFieldset(fieldsetID)
{
	url='{/literal}{$rootUrl}{literal}/search2/ajax/metadata.php?what=fields&fieldsetid=' + fieldsetID;
	YAHOO.util.Connect.asyncRequest('GET',url, fieldSetFieldCallback);
}

// gets the fieldset for the document type
var metadata_gotDocumentTypeFieldSet = function callBack(o)
{
	if (o.responseText != '{}')
	{
		var resp = eval('(' + o.responseText + ')');
		if (resp.status == 0)
		{
			if (resp.fieldsets.length == 0)
			{
				alert('There are no fieldsets for the document type.');
			}
			else
			{
				metadata_fieldsets = resp.fieldsets;

				loadFieldset(metadata_fieldsets[0].id);
				// only load the first fieldset, the rest are chained from loading fields
			}
		}
		else
		{
			alert('There is a problem getting the document type field sets. \n\n' + resp.message );
		}
	}
}

var documentTypeFieldSetCallback =
{
	success:metadata_gotDocumentTypeFieldSet,
	failure:metadata_gotNoStatus
}

// needed to load document types
function loadFieldsetsForDocumentType(documentTypeID)
{
	url='{/literal}{$rootUrl}{literal}/search2/ajax/metadata.php?what=documenttypefieldsets&documenttypeid='+documentTypeID;

	YAHOO.util.Connect.asyncRequest('GET',url, documentTypeFieldSetCallback);
}

// needed to change fieldset info when document type is changed
function selDocumentTypeChange(selDocumentType)
{
	$('divFieldsets').innerHTML  = "";
	$('radDocType').checked = true;
	metadata_init();

	if (selDocumentType.value != '')
	{
		$('divActualButtons').innerHTML = '';
		loadFieldsetsForDocumentType(selDocumentType.value);
	}
}

function selFieldSetChange(selFieldSet)
{
	$('divFieldsets').innerHTML  = "";
	$('radFieldSet').checked = true;
	metadata_init();
	if (selFieldSet.value != '')
	{
		$('divActualButtons').innerHTML = '';

		metadata_fieldsets[0] = {id:selFieldSet.value,name:selFieldSet.options[selFieldSet.selectedIndex].text};
		loadFieldset(selFieldSet.value);
	}
}

function metadata_init()
{
	metadata_html = '';
	metadata_offset = 0;
	metadata_fieldsets= [];
	metadata_fields=[];
	metadata_field_html=[];
	fields_visible = 0;
	metadata_fieldset_offsets = [];
	metadata_fieldsets_active = [];
}


</script>
{/literal}

<!-- METADATA -->

<fieldset>


<!-- DOCUMENT TYPE -->



	Select a document type or field set from which to create a query.
	<form  id=frmQuery name=frmQuery method="POST" action="{addQS}action=process{/addQS}">

	<table>
	<tr>
	<td><input type="radio" id=radDocType name="selFieldSetGroup" checked></td>
	<td><select id=selDocumentTypes onchange="selDocumentTypeChange(this)" onfocus="$('radDocType').checked=true;">
			<option value="">--Please select a document type</option>
	</select>
	</td>
	<td>&nbsp;&nbsp;or&nbsp;&nbsp;</td>
	<td><input type="radio" id=radFieldSet name="selFieldSetGroup" onfocus="$('radFieldSet').checked=true;"></td>
	<td><select id=selFieldSets onchange="selFieldSetChange(this)">
			<option value="">--Please select a field set</option>
	</select>
	</td>
	</tr>
	</table>

	{literal}
	<script>
		loadDocumentTypes();
		loadFieldSets();
	</script>
	{/literal}

<!-- FIELD SETS -->
<br><br>
<div id=divFieldsets>
</div>

<div id=divActualButtons></div>

</form>

</fieldset>

<!-- this must stay- this will be copied to divActualButtons by javascript -->

<div id=divButtons style="visibility: hidden">
<br>
<input type="button" value="{i18n}Search{/i18n}" onclick="butSearchClick()"/>
<input type="button" value="{i18n}Clear{/i18n}" onclick="butClearClick()"/>
</div>
</div>